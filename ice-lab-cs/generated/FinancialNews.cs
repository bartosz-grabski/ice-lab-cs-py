// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `FinancialNews.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


using _System = global::System;
using _Microsoft = global::Microsoft;

#pragma warning disable 1591

namespace IceCompactId
{
}

namespace FinancialNews
{
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public enum Currency
    {
        PLN,
        USD,
        EUR,
        CHF
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface NewsReceiver : Ice.Object, NewsReceiverOperations_, NewsReceiverOperationsNC_
    {
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface NewsServer : Ice.Object, NewsServerOperations_, NewsServerOperationsNC_
    {
    }
}

namespace FinancialNews
{
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public delegate void Callback_NewsReceiver_exchangeRate();

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public delegate void Callback_NewsReceiver_interestRate();

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public delegate void Callback_NewsServer_registerForNews();
}

namespace FinancialNews
{
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public interface NewsReceiverPrx : Ice.ObjectPrx
    {
        void exchangeRate(FinancialNews.Currency curr1, FinancialNews.Currency curr2, float rate);
        void exchangeRate(FinancialNews.Currency curr1, FinancialNews.Currency curr2, float rate, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<FinancialNews.Callback_NewsReceiver_exchangeRate> begin_exchangeRate(FinancialNews.Currency curr1, FinancialNews.Currency curr2, float rate);
        Ice.AsyncResult<FinancialNews.Callback_NewsReceiver_exchangeRate> begin_exchangeRate(FinancialNews.Currency curr1, FinancialNews.Currency curr2, float rate, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_exchangeRate(FinancialNews.Currency curr1, FinancialNews.Currency curr2, float rate, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_exchangeRate(FinancialNews.Currency curr1, FinancialNews.Currency curr2, float rate, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        void end_exchangeRate(Ice.AsyncResult r__);

        void interestRate(FinancialNews.Currency curr, float rate);
        void interestRate(FinancialNews.Currency curr, float rate, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<FinancialNews.Callback_NewsReceiver_interestRate> begin_interestRate(FinancialNews.Currency curr, float rate);
        Ice.AsyncResult<FinancialNews.Callback_NewsReceiver_interestRate> begin_interestRate(FinancialNews.Currency curr, float rate, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_interestRate(FinancialNews.Currency curr, float rate, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_interestRate(FinancialNews.Currency curr, float rate, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        void end_interestRate(Ice.AsyncResult r__);
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public interface NewsServerPrx : Ice.ObjectPrx
    {
        void registerForNews(FinancialNews.NewsReceiverPrx subscriber);
        void registerForNews(FinancialNews.NewsReceiverPrx subscriber, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<FinancialNews.Callback_NewsServer_registerForNews> begin_registerForNews(FinancialNews.NewsReceiverPrx subscriber);
        Ice.AsyncResult<FinancialNews.Callback_NewsServer_registerForNews> begin_registerForNews(FinancialNews.NewsReceiverPrx subscriber, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_registerForNews(FinancialNews.NewsReceiverPrx subscriber, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_registerForNews(FinancialNews.NewsReceiverPrx subscriber, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        void end_registerForNews(Ice.AsyncResult r__);
    }
}

namespace FinancialNews
{
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public interface NewsReceiverOperations_
    {
        void exchangeRate(FinancialNews.Currency curr1, FinancialNews.Currency curr2, float rate, Ice.Current current__);

        void interestRate(FinancialNews.Currency curr, float rate, Ice.Current current__);
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public interface NewsReceiverOperationsNC_
    {
        void exchangeRate(FinancialNews.Currency curr1, FinancialNews.Currency curr2, float rate);

        void interestRate(FinancialNews.Currency curr, float rate);
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public interface NewsServerOperations_
    {
        void registerForNews(FinancialNews.NewsReceiverPrx subscriber, Ice.Current current__);
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public interface NewsServerOperationsNC_
    {
        void registerForNews(FinancialNews.NewsReceiverPrx subscriber);
    }
}

namespace FinancialNews
{
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public sealed class NewsReceiverPrxHelper : Ice.ObjectPrxHelperBase, NewsReceiverPrx
    {
        #region Synchronous operations

        public void exchangeRate(FinancialNews.Currency curr1, FinancialNews.Currency curr2, float rate)
        {
            exchangeRate(curr1, curr2, rate, null, false);
        }

        public void exchangeRate(FinancialNews.Currency curr1, FinancialNews.Currency curr2, float rate, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            exchangeRate(curr1, curr2, rate, context__, true);
        }

        private void exchangeRate(FinancialNews.Currency curr1, FinancialNews.Currency curr2, float rate, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __exchangeRate_name, context__);
            int cnt__ = 0;
            try
            {
                while(true)
                {
                    Ice.ObjectDel_ delBase__ = null;
                    try
                    {
                        delBase__ = getDelegate__(false);
                        NewsReceiverDel_ del__ = (NewsReceiverDel_)delBase__;
                        del__.exchangeRate(curr1, curr2, rate, context__, observer__);
                        return;
                    }
                    catch(IceInternal.LocalExceptionWrapper ex__)
                    {
                        handleExceptionWrapper__(delBase__, ex__, observer__);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        handleException__(delBase__, ex__, true, ref cnt__, observer__);
                    }
                }
            }
            finally
            {
                if(observer__ != null)
                {
                    observer__.detach();
                }
            }
        }

        public void interestRate(FinancialNews.Currency curr, float rate)
        {
            interestRate(curr, rate, null, false);
        }

        public void interestRate(FinancialNews.Currency curr, float rate, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            interestRate(curr, rate, context__, true);
        }

        private void interestRate(FinancialNews.Currency curr, float rate, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __interestRate_name, context__);
            int cnt__ = 0;
            try
            {
                while(true)
                {
                    Ice.ObjectDel_ delBase__ = null;
                    try
                    {
                        delBase__ = getDelegate__(false);
                        NewsReceiverDel_ del__ = (NewsReceiverDel_)delBase__;
                        del__.interestRate(curr, rate, context__, observer__);
                        return;
                    }
                    catch(IceInternal.LocalExceptionWrapper ex__)
                    {
                        handleExceptionWrapper__(delBase__, ex__, observer__);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        handleException__(delBase__, ex__, true, ref cnt__, observer__);
                    }
                }
            }
            finally
            {
                if(observer__ != null)
                {
                    observer__.detach();
                }
            }
        }

        #endregion

        #region Asynchronous operations

        public Ice.AsyncResult<FinancialNews.Callback_NewsReceiver_exchangeRate> begin_exchangeRate(FinancialNews.Currency curr1, FinancialNews.Currency curr2, float rate)
        {
            return begin_exchangeRate(curr1, curr2, rate, null, false, null, null);
        }

        public Ice.AsyncResult<FinancialNews.Callback_NewsReceiver_exchangeRate> begin_exchangeRate(FinancialNews.Currency curr1, FinancialNews.Currency curr2, float rate, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_exchangeRate(curr1, curr2, rate, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_exchangeRate(FinancialNews.Currency curr1, FinancialNews.Currency curr2, float rate, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_exchangeRate(curr1, curr2, rate, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_exchangeRate(FinancialNews.Currency curr1, FinancialNews.Currency curr2, float rate, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_exchangeRate(curr1, curr2, rate, ctx__, true, cb__, cookie__);
        }

        private const string __exchangeRate_name = "exchangeRate";

        public void end_exchangeRate(Ice.AsyncResult r__)
        {
            end__(r__, __exchangeRate_name);
        }

        private Ice.AsyncResult<FinancialNews.Callback_NewsReceiver_exchangeRate> begin_exchangeRate(FinancialNews.Currency curr1, FinancialNews.Currency curr2, float rate, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            IceInternal.OnewayOutgoingAsync<FinancialNews.Callback_NewsReceiver_exchangeRate> result__ = new IceInternal.OnewayOutgoingAsync<FinancialNews.Callback_NewsReceiver_exchangeRate>(this, __exchangeRate_name, exchangeRate_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__exchangeRate_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                os__.writeEnum((int)curr1, 3);
                os__.writeEnum((int)curr2, 3);
                os__.writeFloat(rate);
                result__.endWriteParams__();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void exchangeRate_completed__(FinancialNews.Callback_NewsReceiver_exchangeRate cb__)
        {
            if(cb__ != null)
            {
                cb__();
            }
        }

        public Ice.AsyncResult<FinancialNews.Callback_NewsReceiver_interestRate> begin_interestRate(FinancialNews.Currency curr, float rate)
        {
            return begin_interestRate(curr, rate, null, false, null, null);
        }

        public Ice.AsyncResult<FinancialNews.Callback_NewsReceiver_interestRate> begin_interestRate(FinancialNews.Currency curr, float rate, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_interestRate(curr, rate, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_interestRate(FinancialNews.Currency curr, float rate, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_interestRate(curr, rate, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_interestRate(FinancialNews.Currency curr, float rate, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_interestRate(curr, rate, ctx__, true, cb__, cookie__);
        }

        private const string __interestRate_name = "interestRate";

        public void end_interestRate(Ice.AsyncResult r__)
        {
            end__(r__, __interestRate_name);
        }

        private Ice.AsyncResult<FinancialNews.Callback_NewsReceiver_interestRate> begin_interestRate(FinancialNews.Currency curr, float rate, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            IceInternal.OnewayOutgoingAsync<FinancialNews.Callback_NewsReceiver_interestRate> result__ = new IceInternal.OnewayOutgoingAsync<FinancialNews.Callback_NewsReceiver_interestRate>(this, __interestRate_name, interestRate_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__interestRate_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                os__.writeEnum((int)curr, 3);
                os__.writeFloat(rate);
                result__.endWriteParams__();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void interestRate_completed__(FinancialNews.Callback_NewsReceiver_interestRate cb__)
        {
            if(cb__ != null)
            {
                cb__();
            }
        }

        #endregion

        #region Checked and unchecked cast operations

        public static NewsReceiverPrx checkedCast(Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            NewsReceiverPrx r = b as NewsReceiverPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                NewsReceiverPrxHelper h = new NewsReceiverPrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static NewsReceiverPrx checkedCast(Ice.ObjectPrx b, _System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            NewsReceiverPrx r = b as NewsReceiverPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                NewsReceiverPrxHelper h = new NewsReceiverPrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static NewsReceiverPrx checkedCast(Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    NewsReceiverPrxHelper h = new NewsReceiverPrxHelper();
                    h.copyFrom__(bb);
                    return h;
                }
            }
            catch(Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static NewsReceiverPrx checkedCast(Ice.ObjectPrx b, string f, _System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    NewsReceiverPrxHelper h = new NewsReceiverPrxHelper();
                    h.copyFrom__(bb);
                    return h;
                }
            }
            catch(Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static NewsReceiverPrx uncheckedCast(Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            NewsReceiverPrx r = b as NewsReceiverPrx;
            if(r == null)
            {
                NewsReceiverPrxHelper h = new NewsReceiverPrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static NewsReceiverPrx uncheckedCast(Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            NewsReceiverPrxHelper h = new NewsReceiverPrxHelper();
            h.copyFrom__(bb);
            return h;
        }

        public static readonly string[] ids__ =
        {
            "::FinancialNews::NewsReceiver",
            "::Ice::Object"
        };

        public static string ice_staticId()
        {
            return ids__[0];
        }

        #endregion

        #region Marshaling support

        protected override Ice.ObjectDelM_ createDelegateM__()
        {
            return new NewsReceiverDelM_();
        }

        protected override Ice.ObjectDelD_ createDelegateD__()
        {
            return new NewsReceiverDelD_();
        }

        public static void write__(IceInternal.BasicStream os__, NewsReceiverPrx v__)
        {
            os__.writeProxy(v__);
        }

        public static NewsReceiverPrx read__(IceInternal.BasicStream is__)
        {
            Ice.ObjectPrx proxy = is__.readProxy();
            if(proxy != null)
            {
                NewsReceiverPrxHelper result = new NewsReceiverPrxHelper();
                result.copyFrom__(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public sealed class NewsServerPrxHelper : Ice.ObjectPrxHelperBase, NewsServerPrx
    {
        #region Synchronous operations

        public void registerForNews(FinancialNews.NewsReceiverPrx subscriber)
        {
            registerForNews(subscriber, null, false);
        }

        public void registerForNews(FinancialNews.NewsReceiverPrx subscriber, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            registerForNews(subscriber, context__, true);
        }

        private void registerForNews(FinancialNews.NewsReceiverPrx subscriber, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __registerForNews_name, context__);
            int cnt__ = 0;
            try
            {
                while(true)
                {
                    Ice.ObjectDel_ delBase__ = null;
                    try
                    {
                        delBase__ = getDelegate__(false);
                        NewsServerDel_ del__ = (NewsServerDel_)delBase__;
                        del__.registerForNews(subscriber, context__, observer__);
                        return;
                    }
                    catch(IceInternal.LocalExceptionWrapper ex__)
                    {
                        handleExceptionWrapper__(delBase__, ex__, observer__);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        handleException__(delBase__, ex__, true, ref cnt__, observer__);
                    }
                }
            }
            finally
            {
                if(observer__ != null)
                {
                    observer__.detach();
                }
            }
        }

        #endregion

        #region Asynchronous operations

        public Ice.AsyncResult<FinancialNews.Callback_NewsServer_registerForNews> begin_registerForNews(FinancialNews.NewsReceiverPrx subscriber)
        {
            return begin_registerForNews(subscriber, null, false, null, null);
        }

        public Ice.AsyncResult<FinancialNews.Callback_NewsServer_registerForNews> begin_registerForNews(FinancialNews.NewsReceiverPrx subscriber, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_registerForNews(subscriber, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_registerForNews(FinancialNews.NewsReceiverPrx subscriber, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_registerForNews(subscriber, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_registerForNews(FinancialNews.NewsReceiverPrx subscriber, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_registerForNews(subscriber, ctx__, true, cb__, cookie__);
        }

        private const string __registerForNews_name = "registerForNews";

        public void end_registerForNews(Ice.AsyncResult r__)
        {
            end__(r__, __registerForNews_name);
        }

        private Ice.AsyncResult<FinancialNews.Callback_NewsServer_registerForNews> begin_registerForNews(FinancialNews.NewsReceiverPrx subscriber, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            IceInternal.OnewayOutgoingAsync<FinancialNews.Callback_NewsServer_registerForNews> result__ = new IceInternal.OnewayOutgoingAsync<FinancialNews.Callback_NewsServer_registerForNews>(this, __registerForNews_name, registerForNews_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__registerForNews_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                FinancialNews.NewsReceiverPrxHelper.write__(os__, subscriber);
                result__.endWriteParams__();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void registerForNews_completed__(FinancialNews.Callback_NewsServer_registerForNews cb__)
        {
            if(cb__ != null)
            {
                cb__();
            }
        }

        #endregion

        #region Checked and unchecked cast operations

        public static NewsServerPrx checkedCast(Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            NewsServerPrx r = b as NewsServerPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                NewsServerPrxHelper h = new NewsServerPrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static NewsServerPrx checkedCast(Ice.ObjectPrx b, _System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            NewsServerPrx r = b as NewsServerPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                NewsServerPrxHelper h = new NewsServerPrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static NewsServerPrx checkedCast(Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    NewsServerPrxHelper h = new NewsServerPrxHelper();
                    h.copyFrom__(bb);
                    return h;
                }
            }
            catch(Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static NewsServerPrx checkedCast(Ice.ObjectPrx b, string f, _System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    NewsServerPrxHelper h = new NewsServerPrxHelper();
                    h.copyFrom__(bb);
                    return h;
                }
            }
            catch(Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static NewsServerPrx uncheckedCast(Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            NewsServerPrx r = b as NewsServerPrx;
            if(r == null)
            {
                NewsServerPrxHelper h = new NewsServerPrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static NewsServerPrx uncheckedCast(Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            NewsServerPrxHelper h = new NewsServerPrxHelper();
            h.copyFrom__(bb);
            return h;
        }

        public static readonly string[] ids__ =
        {
            "::FinancialNews::NewsServer",
            "::Ice::Object"
        };

        public static string ice_staticId()
        {
            return ids__[0];
        }

        #endregion

        #region Marshaling support

        protected override Ice.ObjectDelM_ createDelegateM__()
        {
            return new NewsServerDelM_();
        }

        protected override Ice.ObjectDelD_ createDelegateD__()
        {
            return new NewsServerDelD_();
        }

        public static void write__(IceInternal.BasicStream os__, NewsServerPrx v__)
        {
            os__.writeProxy(v__);
        }

        public static NewsServerPrx read__(IceInternal.BasicStream is__)
        {
            Ice.ObjectPrx proxy = is__.readProxy();
            if(proxy != null)
            {
                NewsServerPrxHelper result = new NewsServerPrxHelper();
                result.copyFrom__(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }
}

namespace FinancialNews
{
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public interface NewsReceiverDel_ : Ice.ObjectDel_
    {
        void exchangeRate(FinancialNews.Currency curr1, FinancialNews.Currency curr2, float rate, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

        void interestRate(FinancialNews.Currency curr, float rate, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public interface NewsServerDel_ : Ice.ObjectDel_
    {
        void registerForNews(FinancialNews.NewsReceiverPrx subscriber, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);
    }
}

namespace FinancialNews
{
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public sealed class NewsReceiverDelM_ : Ice.ObjectDelM_, NewsReceiverDel_
    {
        public void exchangeRate(FinancialNews.Currency curr1, FinancialNews.Currency curr2, float rate, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("exchangeRate", Ice.OperationMode.Normal, context__, observer__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                    os__.writeEnum((int)curr1, 3);
                    os__.writeEnum((int)curr2, 3);
                    os__.writeFloat(rate);
                    og__.endWriteParams();
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                if(og__.hasResponse())
                {
                    try
                    {
                        if(!ok__)
                        {
                            try
                            {
                                og__.throwUserException();
                            }
                            catch(Ice.UserException ex__)
                            {
                                throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                            }
                        }
                        og__.readEmptyParams();
                    }
                    catch(Ice.LocalException ex__)
                    {
                        throw new IceInternal.LocalExceptionWrapper(ex__, false);
                    }
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public void interestRate(FinancialNews.Currency curr, float rate, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("interestRate", Ice.OperationMode.Normal, context__, observer__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                    os__.writeEnum((int)curr, 3);
                    os__.writeFloat(rate);
                    og__.endWriteParams();
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                if(og__.hasResponse())
                {
                    try
                    {
                        if(!ok__)
                        {
                            try
                            {
                                og__.throwUserException();
                            }
                            catch(Ice.UserException ex__)
                            {
                                throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                            }
                        }
                        og__.readEmptyParams();
                    }
                    catch(Ice.LocalException ex__)
                    {
                        throw new IceInternal.LocalExceptionWrapper(ex__, false);
                    }
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public sealed class NewsServerDelM_ : Ice.ObjectDelM_, NewsServerDel_
    {
        public void registerForNews(FinancialNews.NewsReceiverPrx subscriber, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("registerForNews", Ice.OperationMode.Normal, context__, observer__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                    FinancialNews.NewsReceiverPrxHelper.write__(os__, subscriber);
                    og__.endWriteParams();
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                if(og__.hasResponse())
                {
                    try
                    {
                        if(!ok__)
                        {
                            try
                            {
                                og__.throwUserException();
                            }
                            catch(Ice.UserException ex__)
                            {
                                throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                            }
                        }
                        og__.readEmptyParams();
                    }
                    catch(Ice.LocalException ex__)
                    {
                        throw new IceInternal.LocalExceptionWrapper(ex__, false);
                    }
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }
    }
}

namespace FinancialNews
{
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public sealed class NewsReceiverDelD_ : Ice.ObjectDelD_, NewsReceiverDel_
    {
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public void exchangeRate(FinancialNews.Currency curr1, FinancialNews.Currency curr2, float rate, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "exchangeRate", Ice.OperationMode.Normal, context__);
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                NewsReceiver servant__ = null;
                try
                {
                    servant__ = (NewsReceiver)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                servant__.exchangeRate(curr1, curr2, rate, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public void interestRate(FinancialNews.Currency curr, float rate, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "interestRate", Ice.OperationMode.Normal, context__);
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                NewsReceiver servant__ = null;
                try
                {
                    servant__ = (NewsReceiver)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                servant__.interestRate(curr, rate, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
        }
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public sealed class NewsServerDelD_ : Ice.ObjectDelD_, NewsServerDel_
    {
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public void registerForNews(FinancialNews.NewsReceiverPrx subscriber, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "registerForNews", Ice.OperationMode.Normal, context__);
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                NewsServer servant__ = null;
                try
                {
                    servant__ = (NewsServer)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                servant__.registerForNews(subscriber, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
        }
    }
}

namespace FinancialNews
{
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public abstract class NewsReceiverDisp_ : Ice.ObjectImpl, NewsReceiver
    {
        #region Slice operations

        public void exchangeRate(FinancialNews.Currency curr1, FinancialNews.Currency curr2, float rate)
        {
            exchangeRate(curr1, curr2, rate, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract void exchangeRate(FinancialNews.Currency curr1, FinancialNews.Currency curr2, float rate, Ice.Current current__);

        public void interestRate(FinancialNews.Currency curr, float rate)
        {
            interestRate(curr, rate, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract void interestRate(FinancialNews.Currency curr, float rate, Ice.Current current__);

        #endregion

        #region Slice type-related members

        public static new readonly string[] ids__ = 
        {
            "::FinancialNews::NewsReceiver",
            "::Ice::Object"
        };

        public override bool ice_isA(string s)
        {
            return _System.Array.BinarySearch(ids__, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override bool ice_isA(string s, Ice.Current current__)
        {
            return _System.Array.BinarySearch(ids__, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids()
        {
            return ids__;
        }

        public override string[] ice_ids(Ice.Current current__)
        {
            return ids__;
        }

        public override string ice_id()
        {
            return ids__[0];
        }

        public override string ice_id(Ice.Current current__)
        {
            return ids__[0];
        }

        public static new string ice_staticId()
        {
            return ids__[0];
        }

        #endregion

        #region Operation dispatch

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus exchangeRate___(NewsReceiver obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.startReadParams();
            FinancialNews.Currency curr1;
            FinancialNews.Currency curr2;
            float rate;
            curr1 = (FinancialNews.Currency)is__.readEnum(3);
            curr2 = (FinancialNews.Currency)is__.readEnum(3);
            rate = is__.readFloat();
            inS__.endReadParams();
            obj__.exchangeRate(curr1, curr2, rate, current__);
            inS__.writeEmptyParams__();
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus interestRate___(NewsReceiver obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.startReadParams();
            FinancialNews.Currency curr;
            float rate;
            curr = (FinancialNews.Currency)is__.readEnum(3);
            rate = is__.readFloat();
            inS__.endReadParams();
            obj__.interestRate(curr, rate, current__);
            inS__.writeEmptyParams__();
            return Ice.DispatchStatus.DispatchOK;
        }

        private static string[] all__ =
        {
            "exchangeRate",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping",
            "interestRate"
        };

        public override Ice.DispatchStatus dispatch__(IceInternal.Incoming inS__, Ice.Current current__)
        {
            int pos = _System.Array.BinarySearch(all__, current__.operation, IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return exchangeRate___(this, inS__, current__);
                }
                case 1:
                {
                    return ice_id___(this, inS__, current__);
                }
                case 2:
                {
                    return ice_ids___(this, inS__, current__);
                }
                case 3:
                {
                    return ice_isA___(this, inS__, current__);
                }
                case 4:
                {
                    return ice_ping___(this, inS__, current__);
                }
                case 5:
                {
                    return interestRate___(this, inS__, current__);
                }
            }

            _System.Diagnostics.Debug.Assert(false);
            throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
        }

        #endregion

        #region Marshaling support

        protected override void writeImpl__(IceInternal.BasicStream os__)
        {
            os__.startWriteSlice(ice_staticId(), -1, true);
            os__.endWriteSlice();
        }

        protected override void readImpl__(IceInternal.BasicStream is__)
        {
            is__.startReadSlice();
            is__.endReadSlice();
        }

        #endregion
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public abstract class NewsServerDisp_ : Ice.ObjectImpl, NewsServer
    {
        #region Slice operations

        public void registerForNews(FinancialNews.NewsReceiverPrx subscriber)
        {
            registerForNews(subscriber, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract void registerForNews(FinancialNews.NewsReceiverPrx subscriber, Ice.Current current__);

        #endregion

        #region Slice type-related members

        public static new readonly string[] ids__ = 
        {
            "::FinancialNews::NewsServer",
            "::Ice::Object"
        };

        public override bool ice_isA(string s)
        {
            return _System.Array.BinarySearch(ids__, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override bool ice_isA(string s, Ice.Current current__)
        {
            return _System.Array.BinarySearch(ids__, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids()
        {
            return ids__;
        }

        public override string[] ice_ids(Ice.Current current__)
        {
            return ids__;
        }

        public override string ice_id()
        {
            return ids__[0];
        }

        public override string ice_id(Ice.Current current__)
        {
            return ids__[0];
        }

        public static new string ice_staticId()
        {
            return ids__[0];
        }

        #endregion

        #region Operation dispatch

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus registerForNews___(NewsServer obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.startReadParams();
            FinancialNews.NewsReceiverPrx subscriber;
            subscriber = FinancialNews.NewsReceiverPrxHelper.read__(is__);
            inS__.endReadParams();
            obj__.registerForNews(subscriber, current__);
            inS__.writeEmptyParams__();
            return Ice.DispatchStatus.DispatchOK;
        }

        private static string[] all__ =
        {
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping",
            "registerForNews"
        };

        public override Ice.DispatchStatus dispatch__(IceInternal.Incoming inS__, Ice.Current current__)
        {
            int pos = _System.Array.BinarySearch(all__, current__.operation, IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return ice_id___(this, inS__, current__);
                }
                case 1:
                {
                    return ice_ids___(this, inS__, current__);
                }
                case 2:
                {
                    return ice_isA___(this, inS__, current__);
                }
                case 3:
                {
                    return ice_ping___(this, inS__, current__);
                }
                case 4:
                {
                    return registerForNews___(this, inS__, current__);
                }
            }

            _System.Diagnostics.Debug.Assert(false);
            throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
        }

        #endregion

        #region Marshaling support

        protected override void writeImpl__(IceInternal.BasicStream os__)
        {
            os__.startWriteSlice(ice_staticId(), -1, true);
            os__.endWriteSlice();
        }

        protected override void readImpl__(IceInternal.BasicStream is__)
        {
            is__.startReadSlice();
            is__.endReadSlice();
        }

        #endregion
    }
}
