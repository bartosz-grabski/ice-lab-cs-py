// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Bank.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


using _System = global::System;
using _Microsoft = global::Microsoft;

#pragma warning disable 1591

namespace IceCompactId
{
}

namespace Bank
{
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class IncorrectData : Ice.UserException
    {
        #region Slice data members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public string reason;

        #endregion

        #region Constructors

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public IncorrectData()
        {
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public IncorrectData(_System.Exception ex__) : base(ex__)
        {
        }

        private void initDM__(string reason)
        {
            this.reason = reason;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public IncorrectData(string reason)
        {
            initDM__(reason);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public IncorrectData(string reason, _System.Exception ex__) : base(ex__)
        {
            initDM__(reason);
        }

        #endregion

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public override string ice_name()
        {
            return "Bank::IncorrectData";
        }

        #region Object members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public override int GetHashCode()
        {
            int h__ = 5381;
            IceInternal.HashUtil.hashAdd(ref h__, "::Bank::IncorrectData");
            IceInternal.HashUtil.hashAdd(ref h__, reason);
            return h__;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public override bool Equals(object other__)
        {
            if(other__ == null)
            {
                return false;
            }
            if(object.ReferenceEquals(this, other__))
            {
                return true;
            }
            IncorrectData o__ = other__ as IncorrectData;
            if(o__ == null)
            {
                return false;
            }
            if(reason == null)
            {
                if(o__.reason != null)
                {
                    return false;
                }
            }
            else
            {
                if(!reason.Equals(o__.reason))
                {
                    return false;
                }
            }
            return true;
        }

        #endregion

        #region Comparison members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public static bool operator==(IncorrectData lhs__, IncorrectData rhs__)
        {
            return Equals(lhs__, rhs__);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public static bool operator!=(IncorrectData lhs__, IncorrectData rhs__)
        {
            return !Equals(lhs__, rhs__);
        }

        #endregion

        #region Marshaling support

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        protected override void writeImpl__(IceInternal.BasicStream os__)
        {
            os__.startWriteSlice("::Bank::IncorrectData", -1, true);
            os__.writeString(reason);
            os__.endWriteSlice();
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        protected override void readImpl__(IceInternal.BasicStream is__)
        {
            is__.startReadSlice();
            reason = is__.readString();
            is__.endReadSlice();
        }

        #endregion
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class RequestRejected : Ice.UserException
    {
        #region Slice data members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public string reason;

        #endregion

        #region Constructors

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public RequestRejected()
        {
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public RequestRejected(_System.Exception ex__) : base(ex__)
        {
        }

        private void initDM__(string reason)
        {
            this.reason = reason;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public RequestRejected(string reason)
        {
            initDM__(reason);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public RequestRejected(string reason, _System.Exception ex__) : base(ex__)
        {
            initDM__(reason);
        }

        #endregion

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public override string ice_name()
        {
            return "Bank::RequestRejected";
        }

        #region Object members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public override int GetHashCode()
        {
            int h__ = 5381;
            IceInternal.HashUtil.hashAdd(ref h__, "::Bank::RequestRejected");
            IceInternal.HashUtil.hashAdd(ref h__, reason);
            return h__;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public override bool Equals(object other__)
        {
            if(other__ == null)
            {
                return false;
            }
            if(object.ReferenceEquals(this, other__))
            {
                return true;
            }
            RequestRejected o__ = other__ as RequestRejected;
            if(o__ == null)
            {
                return false;
            }
            if(reason == null)
            {
                if(o__.reason != null)
                {
                    return false;
                }
            }
            else
            {
                if(!reason.Equals(o__.reason))
                {
                    return false;
                }
            }
            return true;
        }

        #endregion

        #region Comparison members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public static bool operator==(RequestRejected lhs__, RequestRejected rhs__)
        {
            return Equals(lhs__, rhs__);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public static bool operator!=(RequestRejected lhs__, RequestRejected rhs__)
        {
            return !Equals(lhs__, rhs__);
        }

        #endregion

        #region Marshaling support

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        protected override void writeImpl__(IceInternal.BasicStream os__)
        {
            os__.startWriteSlice("::Bank::RequestRejected", -1, true);
            os__.writeString(reason);
            os__.endWriteSlice();
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        protected override void readImpl__(IceInternal.BasicStream is__)
        {
            is__.startReadSlice();
            reason = is__.readString();
            is__.endReadSlice();
        }

        #endregion
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class IncorrectAccountNumber : Ice.UserException
    {
        #region Constructors

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public IncorrectAccountNumber()
        {
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public IncorrectAccountNumber(_System.Exception ex__) : base(ex__)
        {
        }

        #endregion

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public override string ice_name()
        {
            return "Bank::IncorrectAccountNumber";
        }

        #region Object members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public override int GetHashCode()
        {
            int h__ = 5381;
            IceInternal.HashUtil.hashAdd(ref h__, "::Bank::IncorrectAccountNumber");
            return h__;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public override bool Equals(object other__)
        {
            if(other__ == null)
            {
                return false;
            }
            if(object.ReferenceEquals(this, other__))
            {
                return true;
            }
            IncorrectAccountNumber o__ = other__ as IncorrectAccountNumber;
            if(o__ == null)
            {
                return false;
            }
            return true;
        }

        #endregion

        #region Comparison members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public static bool operator==(IncorrectAccountNumber lhs__, IncorrectAccountNumber rhs__)
        {
            return Equals(lhs__, rhs__);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public static bool operator!=(IncorrectAccountNumber lhs__, IncorrectAccountNumber rhs__)
        {
            return !Equals(lhs__, rhs__);
        }

        #endregion

        #region Marshaling support

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        protected override void writeImpl__(IceInternal.BasicStream os__)
        {
            os__.startWriteSlice("::Bank::IncorrectAccountNumber", -1, true);
            os__.endWriteSlice();
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        protected override void readImpl__(IceInternal.BasicStream is__)
        {
            is__.startReadSlice();
            is__.endReadSlice();
        }

        #endregion
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class IncorrectAmount : Ice.UserException
    {
        #region Constructors

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public IncorrectAmount()
        {
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public IncorrectAmount(_System.Exception ex__) : base(ex__)
        {
        }

        #endregion

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public override string ice_name()
        {
            return "Bank::IncorrectAmount";
        }

        #region Object members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public override int GetHashCode()
        {
            int h__ = 5381;
            IceInternal.HashUtil.hashAdd(ref h__, "::Bank::IncorrectAmount");
            return h__;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public override bool Equals(object other__)
        {
            if(other__ == null)
            {
                return false;
            }
            if(object.ReferenceEquals(this, other__))
            {
                return true;
            }
            IncorrectAmount o__ = other__ as IncorrectAmount;
            if(o__ == null)
            {
                return false;
            }
            return true;
        }

        #endregion

        #region Comparison members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public static bool operator==(IncorrectAmount lhs__, IncorrectAmount rhs__)
        {
            return Equals(lhs__, rhs__);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public static bool operator!=(IncorrectAmount lhs__, IncorrectAmount rhs__)
        {
            return !Equals(lhs__, rhs__);
        }

        #endregion

        #region Marshaling support

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        protected override void writeImpl__(IceInternal.BasicStream os__)
        {
            os__.startWriteSlice("::Bank::IncorrectAmount", -1, true);
            os__.endWriteSlice();
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        protected override void readImpl__(IceInternal.BasicStream is__)
        {
            is__.startReadSlice();
            is__.endReadSlice();
        }

        #endregion
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class NoSuchAccount : Ice.UserException
    {
        #region Constructors

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public NoSuchAccount()
        {
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public NoSuchAccount(_System.Exception ex__) : base(ex__)
        {
        }

        #endregion

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public override string ice_name()
        {
            return "Bank::NoSuchAccount";
        }

        #region Object members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public override int GetHashCode()
        {
            int h__ = 5381;
            IceInternal.HashUtil.hashAdd(ref h__, "::Bank::NoSuchAccount");
            return h__;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public override bool Equals(object other__)
        {
            if(other__ == null)
            {
                return false;
            }
            if(object.ReferenceEquals(this, other__))
            {
                return true;
            }
            NoSuchAccount o__ = other__ as NoSuchAccount;
            if(o__ == null)
            {
                return false;
            }
            return true;
        }

        #endregion

        #region Comparison members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public static bool operator==(NoSuchAccount lhs__, NoSuchAccount rhs__)
        {
            return Equals(lhs__, rhs__);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public static bool operator!=(NoSuchAccount lhs__, NoSuchAccount rhs__)
        {
            return !Equals(lhs__, rhs__);
        }

        #endregion

        #region Marshaling support

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        protected override void writeImpl__(IceInternal.BasicStream os__)
        {
            os__.startWriteSlice("::Bank::NoSuchAccount", -1, true);
            os__.endWriteSlice();
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        protected override void readImpl__(IceInternal.BasicStream is__)
        {
            is__.startReadSlice();
            is__.endReadSlice();
        }

        #endregion
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public enum currency
    {
        PLN,
        USD,
        EUR,
        CHF
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public enum accountType
    {
        SILVER,
        PREMIUM
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface Account : Ice.Object, AccountOperations_, AccountOperationsNC_
    {
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface PremiumAccount : Ice.Object, PremiumAccountOperations_, PremiumAccountOperationsNC_, Bank.Account
    {
    }

    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class PersonalData : _System.ICloneable
    {
        #region Slice data members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public string firstName;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public string lastName;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public string NationalIDNumber;

        #endregion

        #region Constructors

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public PersonalData()
        {
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public PersonalData(string firstName, string lastName, string NationalIDNumber)
        {
            this.firstName = firstName;
            this.lastName = lastName;
            this.NationalIDNumber = NationalIDNumber;
        }

        #endregion

        #region ICloneable members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public object Clone()
        {
            return MemberwiseClone();
        }

        #endregion

        #region Object members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public override int GetHashCode()
        {
            int h__ = 5381;
            IceInternal.HashUtil.hashAdd(ref h__, "::Bank::PersonalData");
            IceInternal.HashUtil.hashAdd(ref h__, firstName);
            IceInternal.HashUtil.hashAdd(ref h__, lastName);
            IceInternal.HashUtil.hashAdd(ref h__, NationalIDNumber);
            return h__;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public override bool Equals(object other__)
        {
            if(object.ReferenceEquals(this, other__))
            {
                return true;
            }
            if(other__ == null)
            {
                return false;
            }
            if(GetType() != other__.GetType())
            {
                return false;
            }
            PersonalData o__ = (PersonalData)other__;
            if(firstName == null)
            {
                if(o__.firstName != null)
                {
                    return false;
                }
            }
            else
            {
                if(!firstName.Equals(o__.firstName))
                {
                    return false;
                }
            }
            if(lastName == null)
            {
                if(o__.lastName != null)
                {
                    return false;
                }
            }
            else
            {
                if(!lastName.Equals(o__.lastName))
                {
                    return false;
                }
            }
            if(NationalIDNumber == null)
            {
                if(o__.NationalIDNumber != null)
                {
                    return false;
                }
            }
            else
            {
                if(!NationalIDNumber.Equals(o__.NationalIDNumber))
                {
                    return false;
                }
            }
            return true;
        }

        #endregion

        #region Comparison members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public static bool operator==(PersonalData lhs__, PersonalData rhs__)
        {
            return Equals(lhs__, rhs__);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public static bool operator!=(PersonalData lhs__, PersonalData rhs__)
        {
            return !Equals(lhs__, rhs__);
        }

        #endregion

        #region Marshalling support

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public void write__(IceInternal.BasicStream os__)
        {
            os__.writeString(firstName);
            os__.writeString(lastName);
            os__.writeString(NationalIDNumber);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public void read__(IceInternal.BasicStream is__)
        {
            firstName = is__.readString();
            lastName = is__.readString();
            NationalIDNumber = is__.readString();
        }

        #endregion
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface BankManager : Ice.Object, BankManagerOperations_, BankManagerOperationsNC_
    {
    }
}

namespace Bank
{
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public delegate void Callback_Account_getBalance(int ret__);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public delegate void Callback_Account_getAccountNumber(string ret__);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public delegate void Callback_Account_transfer();

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public delegate void Callback_PremiumAccount_calculateLoan(int totalCost, float interestRate);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public delegate void Callback_BankManager_createAccount(string accountID);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public delegate void Callback_BankManager_removeAccount();
}

namespace Bank
{
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public interface AccountPrx : Ice.ObjectPrx
    {
        int getBalance();
        int getBalance(_System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Bank.Callback_Account_getBalance> begin_getBalance();
        Ice.AsyncResult<Bank.Callback_Account_getBalance> begin_getBalance(_System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_getBalance(Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_getBalance(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        int end_getBalance(Ice.AsyncResult r__);

        string getAccountNumber();
        string getAccountNumber(_System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Bank.Callback_Account_getAccountNumber> begin_getAccountNumber();
        Ice.AsyncResult<Bank.Callback_Account_getAccountNumber> begin_getAccountNumber(_System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_getAccountNumber(Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_getAccountNumber(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        string end_getAccountNumber(Ice.AsyncResult r__);

        void transfer(string accountNumber, int amount);
        void transfer(string accountNumber, int amount, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Bank.Callback_Account_transfer> begin_transfer(string accountNumber, int amount);
        Ice.AsyncResult<Bank.Callback_Account_transfer> begin_transfer(string accountNumber, int amount, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_transfer(string accountNumber, int amount, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_transfer(string accountNumber, int amount, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        void end_transfer(Ice.AsyncResult r__);
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public interface PremiumAccountPrx : Bank.AccountPrx
    {
        void calculateLoan(int amount, Bank.currency curr, int period, out int totalCost, out float interestRate);
        void calculateLoan(int amount, Bank.currency curr, int period, out int totalCost, out float interestRate, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Bank.Callback_PremiumAccount_calculateLoan> begin_calculateLoan(int amount, Bank.currency curr, int period);
        Ice.AsyncResult<Bank.Callback_PremiumAccount_calculateLoan> begin_calculateLoan(int amount, Bank.currency curr, int period, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_calculateLoan(int amount, Bank.currency curr, int period, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_calculateLoan(int amount, Bank.currency curr, int period, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        void end_calculateLoan(out int totalCost, out float interestRate, Ice.AsyncResult r__);
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public interface BankManagerPrx : Ice.ObjectPrx
    {
        void createAccount(Bank.PersonalData data, Bank.accountType type, out string accountID);
        void createAccount(Bank.PersonalData data, Bank.accountType type, out string accountID, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Bank.Callback_BankManager_createAccount> begin_createAccount(Bank.PersonalData data, Bank.accountType type);
        Ice.AsyncResult<Bank.Callback_BankManager_createAccount> begin_createAccount(Bank.PersonalData data, Bank.accountType type, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_createAccount(Bank.PersonalData data, Bank.accountType type, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_createAccount(Bank.PersonalData data, Bank.accountType type, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        void end_createAccount(out string accountID, Ice.AsyncResult r__);

        void removeAccount(string accountID);
        void removeAccount(string accountID, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Bank.Callback_BankManager_removeAccount> begin_removeAccount(string accountID);
        Ice.AsyncResult<Bank.Callback_BankManager_removeAccount> begin_removeAccount(string accountID, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_removeAccount(string accountID, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_removeAccount(string accountID, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        void end_removeAccount(Ice.AsyncResult r__);
    }
}

namespace Bank
{
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public interface AccountOperations_
    {
        int getBalance(Ice.Current current__);

        string getAccountNumber(Ice.Current current__);

        void transfer(string accountNumber, int amount, Ice.Current current__);
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public interface AccountOperationsNC_
    {
        int getBalance();

        string getAccountNumber();

        void transfer(string accountNumber, int amount);
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public interface PremiumAccountOperations_ : Bank.AccountOperations_
    {
        void calculateLoan(int amount, Bank.currency curr, int period, out int totalCost, out float interestRate, Ice.Current current__);
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public interface PremiumAccountOperationsNC_ : Bank.AccountOperationsNC_
    {
        void calculateLoan(int amount, Bank.currency curr, int period, out int totalCost, out float interestRate);
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public interface BankManagerOperations_
    {
        void createAccount(Bank.PersonalData data, Bank.accountType type, out string accountID, Ice.Current current__);

        void removeAccount(string accountID, Ice.Current current__);
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public interface BankManagerOperationsNC_
    {
        void createAccount(Bank.PersonalData data, Bank.accountType type, out string accountID);

        void removeAccount(string accountID);
    }
}

namespace Bank
{
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public sealed class AccountPrxHelper : Ice.ObjectPrxHelperBase, AccountPrx
    {
        #region Synchronous operations

        public string getAccountNumber()
        {
            return getAccountNumber(null, false);
        }

        public string getAccountNumber(_System.Collections.Generic.Dictionary<string, string> context__)
        {
            return getAccountNumber(context__, true);
        }

        private string getAccountNumber(_System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __getAccountNumber_name, context__);
            int cnt__ = 0;
            try
            {
                while(true)
                {
                    Ice.ObjectDel_ delBase__ = null;
                    try
                    {
                        checkTwowayOnly__(__getAccountNumber_name);
                        delBase__ = getDelegate__(false);
                        AccountDel_ del__ = (AccountDel_)delBase__;
                        return del__.getAccountNumber(context__, observer__);
                    }
                    catch(IceInternal.LocalExceptionWrapper ex__)
                    {
                        handleExceptionWrapper__(delBase__, ex__, observer__);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        handleException__(delBase__, ex__, true, ref cnt__, observer__);
                    }
                }
            }
            finally
            {
                if(observer__ != null)
                {
                    observer__.detach();
                }
            }
        }

        public int getBalance()
        {
            return getBalance(null, false);
        }

        public int getBalance(_System.Collections.Generic.Dictionary<string, string> context__)
        {
            return getBalance(context__, true);
        }

        private int getBalance(_System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __getBalance_name, context__);
            int cnt__ = 0;
            try
            {
                while(true)
                {
                    Ice.ObjectDel_ delBase__ = null;
                    try
                    {
                        checkTwowayOnly__(__getBalance_name);
                        delBase__ = getDelegate__(false);
                        AccountDel_ del__ = (AccountDel_)delBase__;
                        return del__.getBalance(context__, observer__);
                    }
                    catch(IceInternal.LocalExceptionWrapper ex__)
                    {
                        handleExceptionWrapper__(delBase__, ex__, observer__);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        handleException__(delBase__, ex__, true, ref cnt__, observer__);
                    }
                }
            }
            finally
            {
                if(observer__ != null)
                {
                    observer__.detach();
                }
            }
        }

        public void transfer(string accountNumber, int amount)
        {
            transfer(accountNumber, amount, null, false);
        }

        public void transfer(string accountNumber, int amount, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            transfer(accountNumber, amount, context__, true);
        }

        private void transfer(string accountNumber, int amount, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __transfer_name, context__);
            int cnt__ = 0;
            try
            {
                while(true)
                {
                    Ice.ObjectDel_ delBase__ = null;
                    try
                    {
                        checkTwowayOnly__(__transfer_name);
                        delBase__ = getDelegate__(false);
                        AccountDel_ del__ = (AccountDel_)delBase__;
                        del__.transfer(accountNumber, amount, context__, observer__);
                        return;
                    }
                    catch(IceInternal.LocalExceptionWrapper ex__)
                    {
                        handleExceptionWrapper__(delBase__, ex__, observer__);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        handleException__(delBase__, ex__, true, ref cnt__, observer__);
                    }
                }
            }
            finally
            {
                if(observer__ != null)
                {
                    observer__.detach();
                }
            }
        }

        #endregion

        #region Asynchronous operations

        public Ice.AsyncResult<Bank.Callback_Account_getAccountNumber> begin_getAccountNumber()
        {
            return begin_getAccountNumber(null, false, null, null);
        }

        public Ice.AsyncResult<Bank.Callback_Account_getAccountNumber> begin_getAccountNumber(_System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_getAccountNumber(ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_getAccountNumber(Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_getAccountNumber(null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_getAccountNumber(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_getAccountNumber(ctx__, true, cb__, cookie__);
        }

        private const string __getAccountNumber_name = "getAccountNumber";

        public string end_getAccountNumber(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __getAccountNumber_name);
            bool ok__ = outAsync__.wait__();
            try
            {
                if(!ok__)
                {
                    try
                    {
                        outAsync__.throwUserException__();
                    }
                    catch(Ice.UserException ex__)
                    {
                        throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                    }
                }
                string ret__;
                IceInternal.BasicStream is__ = outAsync__.startReadParams__();
                ret__ = is__.readString();
                outAsync__.endReadParams__();
                return ret__;
            }
            catch(Ice.LocalException ex)
            {
                Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                if(obsv__ != null)
                {
                    obsv__.failed(ex.ice_name());
                }
                throw ex;
            }
        }

        private Ice.AsyncResult<Bank.Callback_Account_getAccountNumber> begin_getAccountNumber(_System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__getAccountNumber_name);
            IceInternal.TwowayOutgoingAsync<Bank.Callback_Account_getAccountNumber> result__ =  new IceInternal.TwowayOutgoingAsync<Bank.Callback_Account_getAccountNumber>(this, __getAccountNumber_name, getAccountNumber_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__getAccountNumber_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                result__.writeEmptyParams__();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void getAccountNumber_completed__(Ice.AsyncResult r__, Bank.Callback_Account_getAccountNumber cb__, Ice.ExceptionCallback excb__)
        {
            string ret__;
            try
            {
                ret__ = end_getAccountNumber(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__);
            }
        }

        public Ice.AsyncResult<Bank.Callback_Account_getBalance> begin_getBalance()
        {
            return begin_getBalance(null, false, null, null);
        }

        public Ice.AsyncResult<Bank.Callback_Account_getBalance> begin_getBalance(_System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_getBalance(ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_getBalance(Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_getBalance(null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_getBalance(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_getBalance(ctx__, true, cb__, cookie__);
        }

        private const string __getBalance_name = "getBalance";

        public int end_getBalance(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __getBalance_name);
            bool ok__ = outAsync__.wait__();
            try
            {
                if(!ok__)
                {
                    try
                    {
                        outAsync__.throwUserException__();
                    }
                    catch(Ice.UserException ex__)
                    {
                        throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                    }
                }
                int ret__;
                IceInternal.BasicStream is__ = outAsync__.startReadParams__();
                ret__ = is__.readInt();
                outAsync__.endReadParams__();
                return ret__;
            }
            catch(Ice.LocalException ex)
            {
                Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                if(obsv__ != null)
                {
                    obsv__.failed(ex.ice_name());
                }
                throw ex;
            }
        }

        private Ice.AsyncResult<Bank.Callback_Account_getBalance> begin_getBalance(_System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__getBalance_name);
            IceInternal.TwowayOutgoingAsync<Bank.Callback_Account_getBalance> result__ =  new IceInternal.TwowayOutgoingAsync<Bank.Callback_Account_getBalance>(this, __getBalance_name, getBalance_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__getBalance_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                result__.writeEmptyParams__();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void getBalance_completed__(Ice.AsyncResult r__, Bank.Callback_Account_getBalance cb__, Ice.ExceptionCallback excb__)
        {
            int ret__;
            try
            {
                ret__ = end_getBalance(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__);
            }
        }

        public Ice.AsyncResult<Bank.Callback_Account_transfer> begin_transfer(string accountNumber, int amount)
        {
            return begin_transfer(accountNumber, amount, null, false, null, null);
        }

        public Ice.AsyncResult<Bank.Callback_Account_transfer> begin_transfer(string accountNumber, int amount, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_transfer(accountNumber, amount, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_transfer(string accountNumber, int amount, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_transfer(accountNumber, amount, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_transfer(string accountNumber, int amount, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_transfer(accountNumber, amount, ctx__, true, cb__, cookie__);
        }

        private const string __transfer_name = "transfer";

        public void end_transfer(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __transfer_name);
            bool ok__ = outAsync__.wait__();
            try
            {
                if(!ok__)
                {
                    try
                    {
                        outAsync__.throwUserException__();
                    }
                    catch(Bank.IncorrectAccountNumber)
                    {
                        throw;
                    }
                    catch(Bank.IncorrectAmount)
                    {
                        throw;
                    }
                    catch(Ice.UserException ex__)
                    {
                        throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                    }
                }
                outAsync__.readEmptyParams__();
            }
            catch(Ice.LocalException ex)
            {
                Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                if(obsv__ != null)
                {
                    obsv__.failed(ex.ice_name());
                }
                throw ex;
            }
        }

        private Ice.AsyncResult<Bank.Callback_Account_transfer> begin_transfer(string accountNumber, int amount, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__transfer_name);
            IceInternal.TwowayOutgoingAsync<Bank.Callback_Account_transfer> result__ =  new IceInternal.TwowayOutgoingAsync<Bank.Callback_Account_transfer>(this, __transfer_name, transfer_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__transfer_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                os__.writeString(accountNumber);
                os__.writeInt(amount);
                result__.endWriteParams__();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void transfer_completed__(Ice.AsyncResult r__, Bank.Callback_Account_transfer cb__, Ice.ExceptionCallback excb__)
        {
            try
            {
                end_transfer(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__();
            }
        }

        #endregion

        #region Checked and unchecked cast operations

        public static AccountPrx checkedCast(Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            AccountPrx r = b as AccountPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                AccountPrxHelper h = new AccountPrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static AccountPrx checkedCast(Ice.ObjectPrx b, _System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            AccountPrx r = b as AccountPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                AccountPrxHelper h = new AccountPrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static AccountPrx checkedCast(Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    AccountPrxHelper h = new AccountPrxHelper();
                    h.copyFrom__(bb);
                    return h;
                }
            }
            catch(Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static AccountPrx checkedCast(Ice.ObjectPrx b, string f, _System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    AccountPrxHelper h = new AccountPrxHelper();
                    h.copyFrom__(bb);
                    return h;
                }
            }
            catch(Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static AccountPrx uncheckedCast(Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            AccountPrx r = b as AccountPrx;
            if(r == null)
            {
                AccountPrxHelper h = new AccountPrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static AccountPrx uncheckedCast(Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            AccountPrxHelper h = new AccountPrxHelper();
            h.copyFrom__(bb);
            return h;
        }

        public static readonly string[] ids__ =
        {
            "::Bank::Account",
            "::Ice::Object"
        };

        public static string ice_staticId()
        {
            return ids__[0];
        }

        #endregion

        #region Marshaling support

        protected override Ice.ObjectDelM_ createDelegateM__()
        {
            return new AccountDelM_();
        }

        protected override Ice.ObjectDelD_ createDelegateD__()
        {
            return new AccountDelD_();
        }

        public static void write__(IceInternal.BasicStream os__, AccountPrx v__)
        {
            os__.writeProxy(v__);
        }

        public static AccountPrx read__(IceInternal.BasicStream is__)
        {
            Ice.ObjectPrx proxy = is__.readProxy();
            if(proxy != null)
            {
                AccountPrxHelper result = new AccountPrxHelper();
                result.copyFrom__(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public sealed class PremiumAccountPrxHelper : Ice.ObjectPrxHelperBase, PremiumAccountPrx
    {
        #region Synchronous operations

        public string getAccountNumber()
        {
            return getAccountNumber(null, false);
        }

        public string getAccountNumber(_System.Collections.Generic.Dictionary<string, string> context__)
        {
            return getAccountNumber(context__, true);
        }

        private string getAccountNumber(_System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __getAccountNumber_name, context__);
            int cnt__ = 0;
            try
            {
                while(true)
                {
                    Ice.ObjectDel_ delBase__ = null;
                    try
                    {
                        checkTwowayOnly__(__getAccountNumber_name);
                        delBase__ = getDelegate__(false);
                        PremiumAccountDel_ del__ = (PremiumAccountDel_)delBase__;
                        return del__.getAccountNumber(context__, observer__);
                    }
                    catch(IceInternal.LocalExceptionWrapper ex__)
                    {
                        handleExceptionWrapper__(delBase__, ex__, observer__);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        handleException__(delBase__, ex__, true, ref cnt__, observer__);
                    }
                }
            }
            finally
            {
                if(observer__ != null)
                {
                    observer__.detach();
                }
            }
        }

        public int getBalance()
        {
            return getBalance(null, false);
        }

        public int getBalance(_System.Collections.Generic.Dictionary<string, string> context__)
        {
            return getBalance(context__, true);
        }

        private int getBalance(_System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __getBalance_name, context__);
            int cnt__ = 0;
            try
            {
                while(true)
                {
                    Ice.ObjectDel_ delBase__ = null;
                    try
                    {
                        checkTwowayOnly__(__getBalance_name);
                        delBase__ = getDelegate__(false);
                        PremiumAccountDel_ del__ = (PremiumAccountDel_)delBase__;
                        return del__.getBalance(context__, observer__);
                    }
                    catch(IceInternal.LocalExceptionWrapper ex__)
                    {
                        handleExceptionWrapper__(delBase__, ex__, observer__);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        handleException__(delBase__, ex__, true, ref cnt__, observer__);
                    }
                }
            }
            finally
            {
                if(observer__ != null)
                {
                    observer__.detach();
                }
            }
        }

        public void transfer(string accountNumber, int amount)
        {
            transfer(accountNumber, amount, null, false);
        }

        public void transfer(string accountNumber, int amount, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            transfer(accountNumber, amount, context__, true);
        }

        private void transfer(string accountNumber, int amount, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __transfer_name, context__);
            int cnt__ = 0;
            try
            {
                while(true)
                {
                    Ice.ObjectDel_ delBase__ = null;
                    try
                    {
                        checkTwowayOnly__(__transfer_name);
                        delBase__ = getDelegate__(false);
                        PremiumAccountDel_ del__ = (PremiumAccountDel_)delBase__;
                        del__.transfer(accountNumber, amount, context__, observer__);
                        return;
                    }
                    catch(IceInternal.LocalExceptionWrapper ex__)
                    {
                        handleExceptionWrapper__(delBase__, ex__, observer__);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        handleException__(delBase__, ex__, true, ref cnt__, observer__);
                    }
                }
            }
            finally
            {
                if(observer__ != null)
                {
                    observer__.detach();
                }
            }
        }

        public void calculateLoan(int amount, Bank.currency curr, int period, out int totalCost, out float interestRate)
        {
            calculateLoan(amount, curr, period, out totalCost, out interestRate, null, false);
        }

        public void calculateLoan(int amount, Bank.currency curr, int period, out int totalCost, out float interestRate, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            calculateLoan(amount, curr, period, out totalCost, out interestRate, context__, true);
        }

        private void calculateLoan(int amount, Bank.currency curr, int period, out int totalCost, out float interestRate, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __calculateLoan_name, context__);
            int cnt__ = 0;
            try
            {
                while(true)
                {
                    Ice.ObjectDel_ delBase__ = null;
                    try
                    {
                        checkTwowayOnly__(__calculateLoan_name);
                        delBase__ = getDelegate__(false);
                        PremiumAccountDel_ del__ = (PremiumAccountDel_)delBase__;
                        del__.calculateLoan(amount, curr, period, out totalCost, out interestRate, context__, observer__);
                        return;
                    }
                    catch(IceInternal.LocalExceptionWrapper ex__)
                    {
                        handleExceptionWrapper__(delBase__, ex__, observer__);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        handleException__(delBase__, ex__, true, ref cnt__, observer__);
                    }
                }
            }
            finally
            {
                if(observer__ != null)
                {
                    observer__.detach();
                }
            }
        }

        #endregion

        #region Asynchronous operations

        public Ice.AsyncResult<Bank.Callback_Account_getAccountNumber> begin_getAccountNumber()
        {
            return begin_getAccountNumber(null, false, null, null);
        }

        public Ice.AsyncResult<Bank.Callback_Account_getAccountNumber> begin_getAccountNumber(_System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_getAccountNumber(ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_getAccountNumber(Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_getAccountNumber(null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_getAccountNumber(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_getAccountNumber(ctx__, true, cb__, cookie__);
        }

        private const string __getAccountNumber_name = "getAccountNumber";

        public string end_getAccountNumber(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __getAccountNumber_name);
            bool ok__ = outAsync__.wait__();
            try
            {
                if(!ok__)
                {
                    try
                    {
                        outAsync__.throwUserException__();
                    }
                    catch(Ice.UserException ex__)
                    {
                        throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                    }
                }
                string ret__;
                IceInternal.BasicStream is__ = outAsync__.startReadParams__();
                ret__ = is__.readString();
                outAsync__.endReadParams__();
                return ret__;
            }
            catch(Ice.LocalException ex)
            {
                Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                if(obsv__ != null)
                {
                    obsv__.failed(ex.ice_name());
                }
                throw ex;
            }
        }

        private Ice.AsyncResult<Bank.Callback_Account_getAccountNumber> begin_getAccountNumber(_System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__getAccountNumber_name);
            IceInternal.TwowayOutgoingAsync<Bank.Callback_Account_getAccountNumber> result__ =  new IceInternal.TwowayOutgoingAsync<Bank.Callback_Account_getAccountNumber>(this, __getAccountNumber_name, getAccountNumber_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__getAccountNumber_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                result__.writeEmptyParams__();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void getAccountNumber_completed__(Ice.AsyncResult r__, Bank.Callback_Account_getAccountNumber cb__, Ice.ExceptionCallback excb__)
        {
            string ret__;
            try
            {
                ret__ = end_getAccountNumber(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__);
            }
        }

        public Ice.AsyncResult<Bank.Callback_Account_getBalance> begin_getBalance()
        {
            return begin_getBalance(null, false, null, null);
        }

        public Ice.AsyncResult<Bank.Callback_Account_getBalance> begin_getBalance(_System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_getBalance(ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_getBalance(Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_getBalance(null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_getBalance(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_getBalance(ctx__, true, cb__, cookie__);
        }

        private const string __getBalance_name = "getBalance";

        public int end_getBalance(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __getBalance_name);
            bool ok__ = outAsync__.wait__();
            try
            {
                if(!ok__)
                {
                    try
                    {
                        outAsync__.throwUserException__();
                    }
                    catch(Ice.UserException ex__)
                    {
                        throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                    }
                }
                int ret__;
                IceInternal.BasicStream is__ = outAsync__.startReadParams__();
                ret__ = is__.readInt();
                outAsync__.endReadParams__();
                return ret__;
            }
            catch(Ice.LocalException ex)
            {
                Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                if(obsv__ != null)
                {
                    obsv__.failed(ex.ice_name());
                }
                throw ex;
            }
        }

        private Ice.AsyncResult<Bank.Callback_Account_getBalance> begin_getBalance(_System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__getBalance_name);
            IceInternal.TwowayOutgoingAsync<Bank.Callback_Account_getBalance> result__ =  new IceInternal.TwowayOutgoingAsync<Bank.Callback_Account_getBalance>(this, __getBalance_name, getBalance_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__getBalance_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                result__.writeEmptyParams__();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void getBalance_completed__(Ice.AsyncResult r__, Bank.Callback_Account_getBalance cb__, Ice.ExceptionCallback excb__)
        {
            int ret__;
            try
            {
                ret__ = end_getBalance(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__);
            }
        }

        public Ice.AsyncResult<Bank.Callback_Account_transfer> begin_transfer(string accountNumber, int amount)
        {
            return begin_transfer(accountNumber, amount, null, false, null, null);
        }

        public Ice.AsyncResult<Bank.Callback_Account_transfer> begin_transfer(string accountNumber, int amount, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_transfer(accountNumber, amount, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_transfer(string accountNumber, int amount, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_transfer(accountNumber, amount, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_transfer(string accountNumber, int amount, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_transfer(accountNumber, amount, ctx__, true, cb__, cookie__);
        }

        private const string __transfer_name = "transfer";

        public void end_transfer(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __transfer_name);
            bool ok__ = outAsync__.wait__();
            try
            {
                if(!ok__)
                {
                    try
                    {
                        outAsync__.throwUserException__();
                    }
                    catch(Bank.IncorrectAccountNumber)
                    {
                        throw;
                    }
                    catch(Bank.IncorrectAmount)
                    {
                        throw;
                    }
                    catch(Ice.UserException ex__)
                    {
                        throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                    }
                }
                outAsync__.readEmptyParams__();
            }
            catch(Ice.LocalException ex)
            {
                Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                if(obsv__ != null)
                {
                    obsv__.failed(ex.ice_name());
                }
                throw ex;
            }
        }

        private Ice.AsyncResult<Bank.Callback_Account_transfer> begin_transfer(string accountNumber, int amount, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__transfer_name);
            IceInternal.TwowayOutgoingAsync<Bank.Callback_Account_transfer> result__ =  new IceInternal.TwowayOutgoingAsync<Bank.Callback_Account_transfer>(this, __transfer_name, transfer_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__transfer_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                os__.writeString(accountNumber);
                os__.writeInt(amount);
                result__.endWriteParams__();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void transfer_completed__(Ice.AsyncResult r__, Bank.Callback_Account_transfer cb__, Ice.ExceptionCallback excb__)
        {
            try
            {
                end_transfer(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__();
            }
        }

        public Ice.AsyncResult<Bank.Callback_PremiumAccount_calculateLoan> begin_calculateLoan(int amount, Bank.currency curr, int period)
        {
            return begin_calculateLoan(amount, curr, period, null, false, null, null);
        }

        public Ice.AsyncResult<Bank.Callback_PremiumAccount_calculateLoan> begin_calculateLoan(int amount, Bank.currency curr, int period, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_calculateLoan(amount, curr, period, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_calculateLoan(int amount, Bank.currency curr, int period, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_calculateLoan(amount, curr, period, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_calculateLoan(int amount, Bank.currency curr, int period, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_calculateLoan(amount, curr, period, ctx__, true, cb__, cookie__);
        }

        private const string __calculateLoan_name = "calculateLoan";

        public void end_calculateLoan(out int totalCost, out float interestRate, Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __calculateLoan_name);
            bool ok__ = outAsync__.wait__();
            try
            {
                if(!ok__)
                {
                    try
                    {
                        outAsync__.throwUserException__();
                    }
                    catch(Bank.IncorrectData)
                    {
                        throw;
                    }
                    catch(Ice.UserException ex__)
                    {
                        throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                    }
                }
                IceInternal.BasicStream is__ = outAsync__.startReadParams__();
                totalCost = is__.readInt();
                interestRate = is__.readFloat();
                outAsync__.endReadParams__();
            }
            catch(Ice.LocalException ex)
            {
                Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                if(obsv__ != null)
                {
                    obsv__.failed(ex.ice_name());
                }
                throw ex;
            }
        }

        private Ice.AsyncResult<Bank.Callback_PremiumAccount_calculateLoan> begin_calculateLoan(int amount, Bank.currency curr, int period, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__calculateLoan_name);
            IceInternal.TwowayOutgoingAsync<Bank.Callback_PremiumAccount_calculateLoan> result__ =  new IceInternal.TwowayOutgoingAsync<Bank.Callback_PremiumAccount_calculateLoan>(this, __calculateLoan_name, calculateLoan_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__calculateLoan_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                os__.writeInt(amount);
                os__.writeEnum((int)curr, 3);
                os__.writeInt(period);
                result__.endWriteParams__();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void calculateLoan_completed__(Ice.AsyncResult r__, Bank.Callback_PremiumAccount_calculateLoan cb__, Ice.ExceptionCallback excb__)
        {
            int totalCost;
            float interestRate;
            try
            {
                end_calculateLoan(out totalCost, out interestRate, r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(totalCost, interestRate);
            }
        }

        #endregion

        #region Checked and unchecked cast operations

        public static PremiumAccountPrx checkedCast(Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            PremiumAccountPrx r = b as PremiumAccountPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                PremiumAccountPrxHelper h = new PremiumAccountPrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static PremiumAccountPrx checkedCast(Ice.ObjectPrx b, _System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            PremiumAccountPrx r = b as PremiumAccountPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                PremiumAccountPrxHelper h = new PremiumAccountPrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static PremiumAccountPrx checkedCast(Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    PremiumAccountPrxHelper h = new PremiumAccountPrxHelper();
                    h.copyFrom__(bb);
                    return h;
                }
            }
            catch(Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static PremiumAccountPrx checkedCast(Ice.ObjectPrx b, string f, _System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    PremiumAccountPrxHelper h = new PremiumAccountPrxHelper();
                    h.copyFrom__(bb);
                    return h;
                }
            }
            catch(Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static PremiumAccountPrx uncheckedCast(Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            PremiumAccountPrx r = b as PremiumAccountPrx;
            if(r == null)
            {
                PremiumAccountPrxHelper h = new PremiumAccountPrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static PremiumAccountPrx uncheckedCast(Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            PremiumAccountPrxHelper h = new PremiumAccountPrxHelper();
            h.copyFrom__(bb);
            return h;
        }

        public static readonly string[] ids__ =
        {
            "::Bank::Account",
            "::Bank::PremiumAccount",
            "::Ice::Object"
        };

        public static string ice_staticId()
        {
            return ids__[1];
        }

        #endregion

        #region Marshaling support

        protected override Ice.ObjectDelM_ createDelegateM__()
        {
            return new PremiumAccountDelM_();
        }

        protected override Ice.ObjectDelD_ createDelegateD__()
        {
            return new PremiumAccountDelD_();
        }

        public static void write__(IceInternal.BasicStream os__, PremiumAccountPrx v__)
        {
            os__.writeProxy(v__);
        }

        public static PremiumAccountPrx read__(IceInternal.BasicStream is__)
        {
            Ice.ObjectPrx proxy = is__.readProxy();
            if(proxy != null)
            {
                PremiumAccountPrxHelper result = new PremiumAccountPrxHelper();
                result.copyFrom__(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public sealed class BankManagerPrxHelper : Ice.ObjectPrxHelperBase, BankManagerPrx
    {
        #region Synchronous operations

        public void createAccount(Bank.PersonalData data, Bank.accountType type, out string accountID)
        {
            createAccount(data, type, out accountID, null, false);
        }

        public void createAccount(Bank.PersonalData data, Bank.accountType type, out string accountID, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            createAccount(data, type, out accountID, context__, true);
        }

        private void createAccount(Bank.PersonalData data, Bank.accountType type, out string accountID, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __createAccount_name, context__);
            int cnt__ = 0;
            try
            {
                while(true)
                {
                    Ice.ObjectDel_ delBase__ = null;
                    try
                    {
                        checkTwowayOnly__(__createAccount_name);
                        delBase__ = getDelegate__(false);
                        BankManagerDel_ del__ = (BankManagerDel_)delBase__;
                        del__.createAccount(data, type, out accountID, context__, observer__);
                        return;
                    }
                    catch(IceInternal.LocalExceptionWrapper ex__)
                    {
                        handleExceptionWrapper__(delBase__, ex__, observer__);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        handleException__(delBase__, ex__, true, ref cnt__, observer__);
                    }
                }
            }
            finally
            {
                if(observer__ != null)
                {
                    observer__.detach();
                }
            }
        }

        public void removeAccount(string accountID)
        {
            removeAccount(accountID, null, false);
        }

        public void removeAccount(string accountID, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            removeAccount(accountID, context__, true);
        }

        private void removeAccount(string accountID, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __removeAccount_name, context__);
            int cnt__ = 0;
            try
            {
                while(true)
                {
                    Ice.ObjectDel_ delBase__ = null;
                    try
                    {
                        checkTwowayOnly__(__removeAccount_name);
                        delBase__ = getDelegate__(false);
                        BankManagerDel_ del__ = (BankManagerDel_)delBase__;
                        del__.removeAccount(accountID, context__, observer__);
                        return;
                    }
                    catch(IceInternal.LocalExceptionWrapper ex__)
                    {
                        handleExceptionWrapper__(delBase__, ex__, observer__);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        handleException__(delBase__, ex__, true, ref cnt__, observer__);
                    }
                }
            }
            finally
            {
                if(observer__ != null)
                {
                    observer__.detach();
                }
            }
        }

        #endregion

        #region Asynchronous operations

        public Ice.AsyncResult<Bank.Callback_BankManager_createAccount> begin_createAccount(Bank.PersonalData data, Bank.accountType type)
        {
            return begin_createAccount(data, type, null, false, null, null);
        }

        public Ice.AsyncResult<Bank.Callback_BankManager_createAccount> begin_createAccount(Bank.PersonalData data, Bank.accountType type, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_createAccount(data, type, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_createAccount(Bank.PersonalData data, Bank.accountType type, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_createAccount(data, type, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_createAccount(Bank.PersonalData data, Bank.accountType type, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_createAccount(data, type, ctx__, true, cb__, cookie__);
        }

        private const string __createAccount_name = "createAccount";

        public void end_createAccount(out string accountID, Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __createAccount_name);
            bool ok__ = outAsync__.wait__();
            try
            {
                if(!ok__)
                {
                    try
                    {
                        outAsync__.throwUserException__();
                    }
                    catch(Bank.IncorrectData)
                    {
                        throw;
                    }
                    catch(Bank.RequestRejected)
                    {
                        throw;
                    }
                    catch(Ice.UserException ex__)
                    {
                        throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                    }
                }
                IceInternal.BasicStream is__ = outAsync__.startReadParams__();
                accountID = is__.readString();
                outAsync__.endReadParams__();
            }
            catch(Ice.LocalException ex)
            {
                Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                if(obsv__ != null)
                {
                    obsv__.failed(ex.ice_name());
                }
                throw ex;
            }
        }

        private Ice.AsyncResult<Bank.Callback_BankManager_createAccount> begin_createAccount(Bank.PersonalData data, Bank.accountType type, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__createAccount_name);
            IceInternal.TwowayOutgoingAsync<Bank.Callback_BankManager_createAccount> result__ =  new IceInternal.TwowayOutgoingAsync<Bank.Callback_BankManager_createAccount>(this, __createAccount_name, createAccount_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__createAccount_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                if(data == null)
                {
                    Bank.PersonalData tmp__ = new Bank.PersonalData();
                    tmp__.write__(os__);
                }
                else
                {
                    data.write__(os__);
                }
                os__.writeEnum((int)type, 1);
                result__.endWriteParams__();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void createAccount_completed__(Ice.AsyncResult r__, Bank.Callback_BankManager_createAccount cb__, Ice.ExceptionCallback excb__)
        {
            string accountID;
            try
            {
                end_createAccount(out accountID, r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(accountID);
            }
        }

        public Ice.AsyncResult<Bank.Callback_BankManager_removeAccount> begin_removeAccount(string accountID)
        {
            return begin_removeAccount(accountID, null, false, null, null);
        }

        public Ice.AsyncResult<Bank.Callback_BankManager_removeAccount> begin_removeAccount(string accountID, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_removeAccount(accountID, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_removeAccount(string accountID, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_removeAccount(accountID, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_removeAccount(string accountID, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_removeAccount(accountID, ctx__, true, cb__, cookie__);
        }

        private const string __removeAccount_name = "removeAccount";

        public void end_removeAccount(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __removeAccount_name);
            bool ok__ = outAsync__.wait__();
            try
            {
                if(!ok__)
                {
                    try
                    {
                        outAsync__.throwUserException__();
                    }
                    catch(Bank.IncorrectData)
                    {
                        throw;
                    }
                    catch(Bank.NoSuchAccount)
                    {
                        throw;
                    }
                    catch(Ice.UserException ex__)
                    {
                        throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                    }
                }
                outAsync__.readEmptyParams__();
            }
            catch(Ice.LocalException ex)
            {
                Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                if(obsv__ != null)
                {
                    obsv__.failed(ex.ice_name());
                }
                throw ex;
            }
        }

        private Ice.AsyncResult<Bank.Callback_BankManager_removeAccount> begin_removeAccount(string accountID, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__removeAccount_name);
            IceInternal.TwowayOutgoingAsync<Bank.Callback_BankManager_removeAccount> result__ =  new IceInternal.TwowayOutgoingAsync<Bank.Callback_BankManager_removeAccount>(this, __removeAccount_name, removeAccount_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__removeAccount_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                os__.writeString(accountID);
                result__.endWriteParams__();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void removeAccount_completed__(Ice.AsyncResult r__, Bank.Callback_BankManager_removeAccount cb__, Ice.ExceptionCallback excb__)
        {
            try
            {
                end_removeAccount(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__();
            }
        }

        #endregion

        #region Checked and unchecked cast operations

        public static BankManagerPrx checkedCast(Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            BankManagerPrx r = b as BankManagerPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                BankManagerPrxHelper h = new BankManagerPrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static BankManagerPrx checkedCast(Ice.ObjectPrx b, _System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            BankManagerPrx r = b as BankManagerPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                BankManagerPrxHelper h = new BankManagerPrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static BankManagerPrx checkedCast(Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    BankManagerPrxHelper h = new BankManagerPrxHelper();
                    h.copyFrom__(bb);
                    return h;
                }
            }
            catch(Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static BankManagerPrx checkedCast(Ice.ObjectPrx b, string f, _System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    BankManagerPrxHelper h = new BankManagerPrxHelper();
                    h.copyFrom__(bb);
                    return h;
                }
            }
            catch(Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static BankManagerPrx uncheckedCast(Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            BankManagerPrx r = b as BankManagerPrx;
            if(r == null)
            {
                BankManagerPrxHelper h = new BankManagerPrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static BankManagerPrx uncheckedCast(Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            BankManagerPrxHelper h = new BankManagerPrxHelper();
            h.copyFrom__(bb);
            return h;
        }

        public static readonly string[] ids__ =
        {
            "::Bank::BankManager",
            "::Ice::Object"
        };

        public static string ice_staticId()
        {
            return ids__[0];
        }

        #endregion

        #region Marshaling support

        protected override Ice.ObjectDelM_ createDelegateM__()
        {
            return new BankManagerDelM_();
        }

        protected override Ice.ObjectDelD_ createDelegateD__()
        {
            return new BankManagerDelD_();
        }

        public static void write__(IceInternal.BasicStream os__, BankManagerPrx v__)
        {
            os__.writeProxy(v__);
        }

        public static BankManagerPrx read__(IceInternal.BasicStream is__)
        {
            Ice.ObjectPrx proxy = is__.readProxy();
            if(proxy != null)
            {
                BankManagerPrxHelper result = new BankManagerPrxHelper();
                result.copyFrom__(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }
}

namespace Bank
{
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public interface AccountDel_ : Ice.ObjectDel_
    {
        int getBalance(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

        string getAccountNumber(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

        void transfer(string accountNumber, int amount, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public interface PremiumAccountDel_ : Bank.AccountDel_
    {
        void calculateLoan(int amount, Bank.currency curr, int period, out int totalCost, out float interestRate, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public interface BankManagerDel_ : Ice.ObjectDel_
    {
        void createAccount(Bank.PersonalData data, Bank.accountType type, out string accountID, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

        void removeAccount(string accountID, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);
    }
}

namespace Bank
{
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public sealed class AccountDelM_ : Ice.ObjectDelM_, AccountDel_
    {
        public string getAccountNumber(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("getAccountNumber", Ice.OperationMode.Normal, context__, observer__);
            try
            {
                og__.writeEmptyParams();
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.startReadParams();
                    string ret__;
                    ret__ = is__.readString();
                    og__.endReadParams();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public int getBalance(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("getBalance", Ice.OperationMode.Normal, context__, observer__);
            try
            {
                og__.writeEmptyParams();
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.startReadParams();
                    int ret__;
                    ret__ = is__.readInt();
                    og__.endReadParams();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public void transfer(string accountNumber, int amount, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("transfer", Ice.OperationMode.Normal, context__, observer__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                    os__.writeString(accountNumber);
                    os__.writeInt(amount);
                    og__.endWriteParams();
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Bank.IncorrectAccountNumber)
                        {
                            throw;
                        }
                        catch(Bank.IncorrectAmount)
                        {
                            throw;
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    og__.readEmptyParams();
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public sealed class PremiumAccountDelM_ : Ice.ObjectDelM_, PremiumAccountDel_
    {
        public string getAccountNumber(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("getAccountNumber", Ice.OperationMode.Normal, context__, observer__);
            try
            {
                og__.writeEmptyParams();
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.startReadParams();
                    string ret__;
                    ret__ = is__.readString();
                    og__.endReadParams();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public int getBalance(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("getBalance", Ice.OperationMode.Normal, context__, observer__);
            try
            {
                og__.writeEmptyParams();
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.startReadParams();
                    int ret__;
                    ret__ = is__.readInt();
                    og__.endReadParams();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public void transfer(string accountNumber, int amount, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("transfer", Ice.OperationMode.Normal, context__, observer__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                    os__.writeString(accountNumber);
                    os__.writeInt(amount);
                    og__.endWriteParams();
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Bank.IncorrectAccountNumber)
                        {
                            throw;
                        }
                        catch(Bank.IncorrectAmount)
                        {
                            throw;
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    og__.readEmptyParams();
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public void calculateLoan(int amount, Bank.currency curr, int period, out int totalCost, out float interestRate, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("calculateLoan", Ice.OperationMode.Normal, context__, observer__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                    os__.writeInt(amount);
                    os__.writeEnum((int)curr, 3);
                    os__.writeInt(period);
                    og__.endWriteParams();
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Bank.IncorrectData)
                        {
                            throw;
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.startReadParams();
                    totalCost = is__.readInt();
                    interestRate = is__.readFloat();
                    og__.endReadParams();
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public sealed class BankManagerDelM_ : Ice.ObjectDelM_, BankManagerDel_
    {
        public void createAccount(Bank.PersonalData data, Bank.accountType type, out string accountID, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("createAccount", Ice.OperationMode.Normal, context__, observer__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                    if(data == null)
                    {
                        Bank.PersonalData tmp__ = new Bank.PersonalData();
                        tmp__.write__(os__);
                    }
                    else
                    {
                        data.write__(os__);
                    }
                    os__.writeEnum((int)type, 1);
                    og__.endWriteParams();
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Bank.IncorrectData)
                        {
                            throw;
                        }
                        catch(Bank.RequestRejected)
                        {
                            throw;
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.startReadParams();
                    accountID = is__.readString();
                    og__.endReadParams();
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public void removeAccount(string accountID, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("removeAccount", Ice.OperationMode.Normal, context__, observer__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                    os__.writeString(accountID);
                    og__.endWriteParams();
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Bank.IncorrectData)
                        {
                            throw;
                        }
                        catch(Bank.NoSuchAccount)
                        {
                            throw;
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    og__.readEmptyParams();
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }
    }
}

namespace Bank
{
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public sealed class AccountDelD_ : Ice.ObjectDelD_, AccountDel_
    {
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public string getAccountNumber(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "getAccountNumber", Ice.OperationMode.Normal, context__);
            string result__ = null;
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                Account servant__ = null;
                try
                {
                    servant__ = (Account)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                result__ = servant__.getAccountNumber(current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
            return result__;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public int getBalance(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "getBalance", Ice.OperationMode.Normal, context__);
            int result__ = 0;
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                Account servant__ = null;
                try
                {
                    servant__ = (Account)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                result__ = servant__.getBalance(current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
            return result__;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public void transfer(string accountNumber, int amount, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "transfer", Ice.OperationMode.Normal, context__);
            Ice.UserException userException__ = null;
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                Account servant__ = null;
                try
                {
                    servant__ = (Account)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                try
                {
                    servant__.transfer(accountNumber, amount, current__);
                    return Ice.DispatchStatus.DispatchOK;
                }
                catch(Ice.UserException ex__)
                {
                    userException__ = ex__;
                    return Ice.DispatchStatus.DispatchUserException;
                }
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                    if(status__ == Ice.DispatchStatus.DispatchUserException)
                    {
                        throw userException__;
                    }
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Bank.IncorrectAccountNumber)
            {
                throw;
            }
            catch(Bank.IncorrectAmount)
            {
                throw;
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
        }
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public sealed class PremiumAccountDelD_ : Ice.ObjectDelD_, PremiumAccountDel_
    {
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public string getAccountNumber(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "getAccountNumber", Ice.OperationMode.Normal, context__);
            string result__ = null;
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                PremiumAccount servant__ = null;
                try
                {
                    servant__ = (PremiumAccount)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                result__ = servant__.getAccountNumber(current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
            return result__;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public int getBalance(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "getBalance", Ice.OperationMode.Normal, context__);
            int result__ = 0;
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                PremiumAccount servant__ = null;
                try
                {
                    servant__ = (PremiumAccount)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                result__ = servant__.getBalance(current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
            return result__;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public void transfer(string accountNumber, int amount, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "transfer", Ice.OperationMode.Normal, context__);
            Ice.UserException userException__ = null;
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                PremiumAccount servant__ = null;
                try
                {
                    servant__ = (PremiumAccount)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                try
                {
                    servant__.transfer(accountNumber, amount, current__);
                    return Ice.DispatchStatus.DispatchOK;
                }
                catch(Ice.UserException ex__)
                {
                    userException__ = ex__;
                    return Ice.DispatchStatus.DispatchUserException;
                }
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                    if(status__ == Ice.DispatchStatus.DispatchUserException)
                    {
                        throw userException__;
                    }
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Bank.IncorrectAccountNumber)
            {
                throw;
            }
            catch(Bank.IncorrectAmount)
            {
                throw;
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public void calculateLoan(int amount, Bank.currency curr, int period, out int totalCost, out float interestRate, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "calculateLoan", Ice.OperationMode.Normal, context__);
            int totalCostHolder__ = 0;
            float interestRateHolder__ = 0.0f;
            Ice.UserException userException__ = null;
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                PremiumAccount servant__ = null;
                try
                {
                    servant__ = (PremiumAccount)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                try
                {
                    servant__.calculateLoan(amount, curr, period, out totalCostHolder__, out interestRateHolder__, current__);
                    return Ice.DispatchStatus.DispatchOK;
                }
                catch(Ice.UserException ex__)
                {
                    userException__ = ex__;
                    return Ice.DispatchStatus.DispatchUserException;
                }
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                    if(status__ == Ice.DispatchStatus.DispatchUserException)
                    {
                        throw userException__;
                    }
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Bank.IncorrectData)
            {
                throw;
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
            totalCost = totalCostHolder__;
            interestRate = interestRateHolder__;
        }
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public sealed class BankManagerDelD_ : Ice.ObjectDelD_, BankManagerDel_
    {
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public void createAccount(Bank.PersonalData data, Bank.accountType type, out string accountID, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "createAccount", Ice.OperationMode.Normal, context__);
            string accountIDHolder__ = null;
            Ice.UserException userException__ = null;
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                BankManager servant__ = null;
                try
                {
                    servant__ = (BankManager)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                try
                {
                    servant__.createAccount(data, type, out accountIDHolder__, current__);
                    return Ice.DispatchStatus.DispatchOK;
                }
                catch(Ice.UserException ex__)
                {
                    userException__ = ex__;
                    return Ice.DispatchStatus.DispatchUserException;
                }
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                    if(status__ == Ice.DispatchStatus.DispatchUserException)
                    {
                        throw userException__;
                    }
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Bank.IncorrectData)
            {
                throw;
            }
            catch(Bank.RequestRejected)
            {
                throw;
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
            accountID = accountIDHolder__;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public void removeAccount(string accountID, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "removeAccount", Ice.OperationMode.Normal, context__);
            Ice.UserException userException__ = null;
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                BankManager servant__ = null;
                try
                {
                    servant__ = (BankManager)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                try
                {
                    servant__.removeAccount(accountID, current__);
                    return Ice.DispatchStatus.DispatchOK;
                }
                catch(Ice.UserException ex__)
                {
                    userException__ = ex__;
                    return Ice.DispatchStatus.DispatchUserException;
                }
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                    if(status__ == Ice.DispatchStatus.DispatchUserException)
                    {
                        throw userException__;
                    }
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Bank.IncorrectData)
            {
                throw;
            }
            catch(Bank.NoSuchAccount)
            {
                throw;
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
        }
    }
}

namespace Bank
{
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public abstract class AccountDisp_ : Ice.ObjectImpl, Account
    {
        #region Slice operations

        public int getBalance()
        {
            return getBalance(Ice.ObjectImpl.defaultCurrent);
        }

        public abstract int getBalance(Ice.Current current__);

        public string getAccountNumber()
        {
            return getAccountNumber(Ice.ObjectImpl.defaultCurrent);
        }

        public abstract string getAccountNumber(Ice.Current current__);

        public void transfer(string accountNumber, int amount)
        {
            transfer(accountNumber, amount, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract void transfer(string accountNumber, int amount, Ice.Current current__);

        #endregion

        #region Slice type-related members

        public static new readonly string[] ids__ = 
        {
            "::Bank::Account",
            "::Ice::Object"
        };

        public override bool ice_isA(string s)
        {
            return _System.Array.BinarySearch(ids__, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override bool ice_isA(string s, Ice.Current current__)
        {
            return _System.Array.BinarySearch(ids__, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids()
        {
            return ids__;
        }

        public override string[] ice_ids(Ice.Current current__)
        {
            return ids__;
        }

        public override string ice_id()
        {
            return ids__[0];
        }

        public override string ice_id(Ice.Current current__)
        {
            return ids__[0];
        }

        public static new string ice_staticId()
        {
            return ids__[0];
        }

        #endregion

        #region Operation dispatch

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus getBalance___(Account obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Normal, current__.mode);
            inS__.readEmptyParams();
            int ret__ = obj__.getBalance(current__);
            IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
            os__.writeInt(ret__);
            inS__.endWriteParams__(true);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus getAccountNumber___(Account obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Normal, current__.mode);
            inS__.readEmptyParams();
            string ret__ = obj__.getAccountNumber(current__);
            IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
            os__.writeString(ret__);
            inS__.endWriteParams__(true);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus transfer___(Account obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.startReadParams();
            string accountNumber;
            int amount;
            accountNumber = is__.readString();
            amount = is__.readInt();
            inS__.endReadParams();
            try
            {
                obj__.transfer(accountNumber, amount, current__);
                inS__.writeEmptyParams__();
                return Ice.DispatchStatus.DispatchOK;
            }
            catch(Bank.IncorrectAccountNumber ex__)
            {
                inS__.writeUserException__(ex__, Ice.FormatType.DefaultFormat);
                return Ice.DispatchStatus.DispatchUserException;
            }
            catch(Bank.IncorrectAmount ex__)
            {
                inS__.writeUserException__(ex__, Ice.FormatType.DefaultFormat);
                return Ice.DispatchStatus.DispatchUserException;
            }
        }

        private static string[] all__ =
        {
            "getAccountNumber",
            "getBalance",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping",
            "transfer"
        };

        public override Ice.DispatchStatus dispatch__(IceInternal.Incoming inS__, Ice.Current current__)
        {
            int pos = _System.Array.BinarySearch(all__, current__.operation, IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return getAccountNumber___(this, inS__, current__);
                }
                case 1:
                {
                    return getBalance___(this, inS__, current__);
                }
                case 2:
                {
                    return ice_id___(this, inS__, current__);
                }
                case 3:
                {
                    return ice_ids___(this, inS__, current__);
                }
                case 4:
                {
                    return ice_isA___(this, inS__, current__);
                }
                case 5:
                {
                    return ice_ping___(this, inS__, current__);
                }
                case 6:
                {
                    return transfer___(this, inS__, current__);
                }
            }

            _System.Diagnostics.Debug.Assert(false);
            throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
        }

        #endregion

        #region Marshaling support

        protected override void writeImpl__(IceInternal.BasicStream os__)
        {
            os__.startWriteSlice(ice_staticId(), -1, true);
            os__.endWriteSlice();
        }

        protected override void readImpl__(IceInternal.BasicStream is__)
        {
            is__.startReadSlice();
            is__.endReadSlice();
        }

        #endregion
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public abstract class PremiumAccountDisp_ : Ice.ObjectImpl, PremiumAccount
    {
        #region Slice operations

        public void calculateLoan(int amount, Bank.currency curr, int period, out int totalCost, out float interestRate)
        {
            calculateLoan(amount, curr, period, out totalCost, out interestRate, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract void calculateLoan(int amount, Bank.currency curr, int period, out int totalCost, out float interestRate, Ice.Current current__);

        #endregion

        #region Inherited Slice operations

        public string getAccountNumber()
        {
            return getAccountNumber(Ice.ObjectImpl.defaultCurrent);
        }

        public abstract string getAccountNumber(Ice.Current current__);

        public int getBalance()
        {
            return getBalance(Ice.ObjectImpl.defaultCurrent);
        }

        public abstract int getBalance(Ice.Current current__);

        public void transfer(string accountNumber, int amount)
        {
            transfer(accountNumber, amount, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract void transfer(string accountNumber, int amount, Ice.Current current__);

        #endregion

        #region Slice type-related members

        public static new readonly string[] ids__ = 
        {
            "::Bank::Account",
            "::Bank::PremiumAccount",
            "::Ice::Object"
        };

        public override bool ice_isA(string s)
        {
            return _System.Array.BinarySearch(ids__, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override bool ice_isA(string s, Ice.Current current__)
        {
            return _System.Array.BinarySearch(ids__, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids()
        {
            return ids__;
        }

        public override string[] ice_ids(Ice.Current current__)
        {
            return ids__;
        }

        public override string ice_id()
        {
            return ids__[1];
        }

        public override string ice_id(Ice.Current current__)
        {
            return ids__[1];
        }

        public static new string ice_staticId()
        {
            return ids__[1];
        }

        #endregion

        #region Operation dispatch

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus calculateLoan___(PremiumAccount obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.startReadParams();
            int amount;
            Bank.currency curr;
            int period;
            amount = is__.readInt();
            curr = (Bank.currency)is__.readEnum(3);
            period = is__.readInt();
            inS__.endReadParams();
            int totalCost;
            float interestRate;
            try
            {
                obj__.calculateLoan(amount, curr, period, out totalCost, out interestRate, current__);
                IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
                os__.writeInt(totalCost);
                os__.writeFloat(interestRate);
                inS__.endWriteParams__(true);
                return Ice.DispatchStatus.DispatchOK;
            }
            catch(Bank.IncorrectData ex__)
            {
                inS__.writeUserException__(ex__, Ice.FormatType.DefaultFormat);
                return Ice.DispatchStatus.DispatchUserException;
            }
        }

        private static string[] all__ =
        {
            "calculateLoan",
            "getAccountNumber",
            "getBalance",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping",
            "transfer"
        };

        public override Ice.DispatchStatus dispatch__(IceInternal.Incoming inS__, Ice.Current current__)
        {
            int pos = _System.Array.BinarySearch(all__, current__.operation, IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return calculateLoan___(this, inS__, current__);
                }
                case 1:
                {
                    return Bank.AccountDisp_.getAccountNumber___(this, inS__, current__);
                }
                case 2:
                {
                    return Bank.AccountDisp_.getBalance___(this, inS__, current__);
                }
                case 3:
                {
                    return ice_id___(this, inS__, current__);
                }
                case 4:
                {
                    return ice_ids___(this, inS__, current__);
                }
                case 5:
                {
                    return ice_isA___(this, inS__, current__);
                }
                case 6:
                {
                    return ice_ping___(this, inS__, current__);
                }
                case 7:
                {
                    return Bank.AccountDisp_.transfer___(this, inS__, current__);
                }
            }

            _System.Diagnostics.Debug.Assert(false);
            throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
        }

        #endregion

        #region Marshaling support

        protected override void writeImpl__(IceInternal.BasicStream os__)
        {
            os__.startWriteSlice(ice_staticId(), -1, true);
            os__.endWriteSlice();
        }

        protected override void readImpl__(IceInternal.BasicStream is__)
        {
            is__.startReadSlice();
            is__.endReadSlice();
        }

        #endregion
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public abstract class BankManagerDisp_ : Ice.ObjectImpl, BankManager
    {
        #region Slice operations

        public void createAccount(Bank.PersonalData data, Bank.accountType type, out string accountID)
        {
            createAccount(data, type, out accountID, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract void createAccount(Bank.PersonalData data, Bank.accountType type, out string accountID, Ice.Current current__);

        public void removeAccount(string accountID)
        {
            removeAccount(accountID, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract void removeAccount(string accountID, Ice.Current current__);

        #endregion

        #region Slice type-related members

        public static new readonly string[] ids__ = 
        {
            "::Bank::BankManager",
            "::Ice::Object"
        };

        public override bool ice_isA(string s)
        {
            return _System.Array.BinarySearch(ids__, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override bool ice_isA(string s, Ice.Current current__)
        {
            return _System.Array.BinarySearch(ids__, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids()
        {
            return ids__;
        }

        public override string[] ice_ids(Ice.Current current__)
        {
            return ids__;
        }

        public override string ice_id()
        {
            return ids__[0];
        }

        public override string ice_id(Ice.Current current__)
        {
            return ids__[0];
        }

        public static new string ice_staticId()
        {
            return ids__[0];
        }

        #endregion

        #region Operation dispatch

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus createAccount___(BankManager obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.startReadParams();
            Bank.PersonalData data;
            data = null;
            Bank.accountType type;
            if(data == null)
            {
                data = new Bank.PersonalData();
            }
            data.read__(is__);
            type = (Bank.accountType)is__.readEnum(1);
            inS__.endReadParams();
            string accountID;
            try
            {
                obj__.createAccount(data, type, out accountID, current__);
                IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
                os__.writeString(accountID);
                inS__.endWriteParams__(true);
                return Ice.DispatchStatus.DispatchOK;
            }
            catch(Bank.IncorrectData ex__)
            {
                inS__.writeUserException__(ex__, Ice.FormatType.DefaultFormat);
                return Ice.DispatchStatus.DispatchUserException;
            }
            catch(Bank.RequestRejected ex__)
            {
                inS__.writeUserException__(ex__, Ice.FormatType.DefaultFormat);
                return Ice.DispatchStatus.DispatchUserException;
            }
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus removeAccount___(BankManager obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.startReadParams();
            string accountID;
            accountID = is__.readString();
            inS__.endReadParams();
            try
            {
                obj__.removeAccount(accountID, current__);
                inS__.writeEmptyParams__();
                return Ice.DispatchStatus.DispatchOK;
            }
            catch(Bank.IncorrectData ex__)
            {
                inS__.writeUserException__(ex__, Ice.FormatType.DefaultFormat);
                return Ice.DispatchStatus.DispatchUserException;
            }
            catch(Bank.NoSuchAccount ex__)
            {
                inS__.writeUserException__(ex__, Ice.FormatType.DefaultFormat);
                return Ice.DispatchStatus.DispatchUserException;
            }
        }

        private static string[] all__ =
        {
            "createAccount",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping",
            "removeAccount"
        };

        public override Ice.DispatchStatus dispatch__(IceInternal.Incoming inS__, Ice.Current current__)
        {
            int pos = _System.Array.BinarySearch(all__, current__.operation, IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return createAccount___(this, inS__, current__);
                }
                case 1:
                {
                    return ice_id___(this, inS__, current__);
                }
                case 2:
                {
                    return ice_ids___(this, inS__, current__);
                }
                case 3:
                {
                    return ice_isA___(this, inS__, current__);
                }
                case 4:
                {
                    return ice_ping___(this, inS__, current__);
                }
                case 5:
                {
                    return removeAccount___(this, inS__, current__);
                }
            }

            _System.Diagnostics.Debug.Assert(false);
            throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
        }

        #endregion

        #region Marshaling support

        protected override void writeImpl__(IceInternal.BasicStream os__)
        {
            os__.startWriteSlice(ice_staticId(), -1, true);
            os__.endWriteSlice();
        }

        protected override void readImpl__(IceInternal.BasicStream is__)
        {
            is__.startReadSlice();
            is__.endReadSlice();
        }

        #endregion
    }
}
